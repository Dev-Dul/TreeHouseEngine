// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  bio      String?
  name     String
  email    String
  username String
  password String
  profile  String?
  backgrd  String?
  sentMessages Messages[] @relation("sender")
  receivedMessages Messages[] @relation("recipient")
  friends  Friend[]   @relation("UserFriends") // User has many friends
  groups   Nests[]
  addedBy   Friend[]  @relation("UserAddedBy")
}

model Messages {
  id       Int      @id @default(autoincrement())
  text     String
  sender   User     @relation("sender", fields: [senderId], references: [id])
  senderId   Int
  recipient   User?  @relation("recipient", fields: [recipientId], references: [id])
  recipientId Int?
  group    Groups?  @relation(fields: [groupId], references: [id])
  groupId  Int?
  created  DateTime @default(now())
}

model Friend {
  id     Int  @id @default(autoincrement())
  user   User @relation("UserFriends", fields: [userId], references: [id])
  userId Int // The one who owns the friend list

  friend   User @relation("UserAddedBy", fields: [friendId], references: [id])
  friendId Int // The user who is being added

}

model Groups {
  id       Int        @id @default(autoincrement())
  name     String
  created  DateTime   @default(now())
  members  Nests[]
  Messages Messages[]
}

model Nests {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  group    Groups   @relation(fields: [groupId], references: [id])
  groupId  Int
  role     String?
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
